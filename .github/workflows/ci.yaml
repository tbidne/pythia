name: ci

on:
  push:
    branches:
      - main
      - kairos

  pull_request:
    branches:
      - main

  workflow_dispatch:

jobs:
  cabal:
    strategy:
      fail-fast: false
      matrix:
        ghc:
          - "9.2.8"
          - "9.4.8"
          - "9.6.6"
          - "9.8.4"
          - "9.10.2"
          - "9.12.2"
        os:
          - "macos-latest"
          - "ubuntu-latest"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - uses: haskell-actions/setup@v2
        with:
          ghc-version: ${{ matrix.ghc }}

      - name: Configure
        run: cabal configure --enable-tests --ghc-options -Werror

      - name: Compile
        run: cabal build exe:pythia

      - name: Unit Tests
        run: cabal test unit

      - name: Integration Tests
        run: cabal test integration
  nix:
    strategy:
      fail-fast: false
      matrix:
        os:
        - "macos-latest"
        - "ubuntu-latest"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup nix
        uses: cachix/install-nix-action@v30
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Compile & Test
        run: |
          set +e

          out=$(nix build 2>&1)
          ec=$?

          regex=".*'(nix log \/nix\/store\/.*.drv)'.*"

          if [[ $ec -ne 0 ]]; then
            if [[ $out =~ $regex ]]; then
              echo echo "*** Regex match ***"
              log_cmd="${BASH_REMATCH[1]}"
              $log_cmd | cat
            else
              echo "*** No regex match on output ***"
              echo $out
            fi
          fi

          exit $ec

  lint:
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v4

      - name: Setup nix
        uses: cachix/install-nix-action@v30
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Formatting
        run: |
          nix run .#format
          git diff --exit-code --color=always
